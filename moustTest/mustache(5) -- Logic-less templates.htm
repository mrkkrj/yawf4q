<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<!-- saved from url=(0042)http://mustache.github.com/mustache.5.html -->
<HTML><HEAD><TITLE>mustache(5) -- Logic-less templates.</TITLE>
<META http-equiv=Content-Type content="text/html; charset=windows-1252">
<META http-equiv=content-type value="text/html;charset=utf8">
<META content="MSHTML 6.00.6000.17063" name=GENERATOR value="Ronn/v0.5">
<STYLE type=text/css>BODY {
	MARGIN: 0px
}
#man {
	FONT-SIZE: 16px; BACKGROUND: #fff; COLOR: #343331; LINE-HEIGHT: 1.3; FONT-FAMILY: consolas,monospace
}
#man CODE {
	FONT-SIZE: 16px; BACKGROUND: #fff; COLOR: #343331; LINE-HEIGHT: 1.3; FONT-FAMILY: consolas,monospace
}
#man PRE {
	FONT-SIZE: 16px; BACKGROUND: #fff; COLOR: #343331; LINE-HEIGHT: 1.3; FONT-FAMILY: consolas,monospace
}
#man TT {
	FONT-SIZE: 16px; BACKGROUND: #fff; COLOR: #343331; LINE-HEIGHT: 1.3; FONT-FAMILY: consolas,monospace
}
#man KBD {
	FONT-SIZE: 16px; BACKGROUND: #fff; COLOR: #343331; LINE-HEIGHT: 1.3; FONT-FAMILY: consolas,monospace
}
#man SAMP {
	FONT-SIZE: 16px; BACKGROUND: #fff; COLOR: #343331; LINE-HEIGHT: 1.3; FONT-FAMILY: consolas,monospace
}
#man {
	MAX-WIDTH: 89ex; MARGIN: 0px 25px 25px; TEXT-ALIGN: justify
}
#man H1 {
	CLEAR: left; COLOR: #232221
}
#man H2 {
	CLEAR: left; COLOR: #232221
}
#man H3 {
	CLEAR: left; COLOR: #232221
}
#man H1 {
	FONT-SIZE: 28px; MARGIN: 15px 0px 30px; TEXT-ALIGN: center
}
#man H2 {
	MARGIN-TOP: 10px; FONT-SIZE: 18px; MARGIN-BOTTOM: 0px; LINE-HEIGHT: 1.3
}
#man H3 {
	FONT-SIZE: 16px; MARGIN: 0px 0px 0px 4ex
}
#man P {
	MARGIN: 0px 0px 18px
}
#man UL {
	MARGIN: 0px 0px 18px
}
#man OL {
	MARGIN: 0px 0px 18px
}
#man DL {
	MARGIN: 0px 0px 18px
}
#man PRE {
	MARGIN: 0px 0px 18px
}
#man PRE {
	PADDING-RIGHT: 7px; PADDING-LEFT: 7px; BACKGROUND: #edeceb; PADDING-BOTTOM: 5px; MARGIN: 0px 0px 20px; BORDER-LEFT: #ddd 2ex solid; COLOR: #333231; PADDING-TOP: 5px
}
#man PRE + H2 {
	MARGIN-TOP: 22px
}
#man PRE + H3 {
	MARGIN-TOP: 22px
}
#man H2 + PRE {
	MARGIN-TOP: 5px
}
#man H3 + PRE {
	MARGIN-TOP: 5px
}
#man > P {
	MARGIN-LEFT: 8ex
}
#man > UL {
	MARGIN-LEFT: 8ex
}
#man > OL {
	MARGIN-LEFT: 8ex
}
#man > DL {
	MARGIN-LEFT: 8ex
}
#man > PRE {
	MARGIN-LEFT: 8ex
}
#man DT {
	CLEAR: left; MARGIN: 0px
}
#man DT.flush {
	FLOAT: left; WIDTH: 8ex
}
#man DD {
	MARGIN: 0px 0px 0px 9ex
}
#man CODE {
	FONT-WEIGHT: bold; COLOR: #131211
}
#man STRONG {
	FONT-WEIGHT: bold; COLOR: #131211
}
#man B {
	FONT-WEIGHT: bold; COLOR: #131211
}
#man PRE CODE {
	FONT-WEIGHT: normal; COLOR: #232221
}
#man EM {
	COLOR: #333231; BORDER-BOTTOM: #999 1px solid; FONT-STYLE: normal
}
VAR {
	COLOR: #333231; BORDER-BOTTOM: #999 1px solid; FONT-STYLE: normal
}
U {
	COLOR: #333231; BORDER-BOTTOM: #999 1px solid; FONT-STYLE: normal
}
#man H1.man-title {
	DISPLAY: none
}
#man OL.man {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; FONT-SIZE: 18px; FLOAT: left; PADDING-BOTTOM: 0px; MARGIN: 2px 0px 10px; TEXT-TRANSFORM: uppercase; WIDTH: 33%; COLOR: #999; PADDING-TOP: 0px; LIST-STYLE-TYPE: none; LETTER-SPACING: 1px
}
#man OL.man LI {
	PADDING-RIGHT: 0px; PADDING-LEFT: 0px; FONT-SIZE: 18px; FLOAT: left; PADDING-BOTTOM: 0px; MARGIN: 2px 0px 10px; TEXT-TRANSFORM: uppercase; WIDTH: 33%; COLOR: #999; PADDING-TOP: 0px; LIST-STYLE-TYPE: none; LETTER-SPACING: 1px
}
#man OL.man {
	WIDTH: 100%
}
#man OL.man LI.tl {
	TEXT-ALIGN: left
}
#man OL.man LI.tc {
	LETTER-SPACING: 4px; TEXT-ALIGN: center
}
#man OL.man LI.tr {
	TEXT-ALIGN: right
}
#man OL.man A {
	COLOR: #999
}
#man OL.man A:hover {
	COLOR: #333231
}
</STYLE>
</HEAD>
<BODY>
<DIV id=man>
<H1 class=man-title>mustache(5)</H1>
<OL class="head man">
  <LI class=tl>mustache(5) </LI>
  <LI class=tc>Mustache Manual </LI>
  <LI class=tr>mustache(5) </LI></OL>
<H2 id=NAME>NAME</H2>
<P><CODE>mustache</CODE> -- Logic-less templates.</P>
<H2>SYNOPSIS</H2>
<P>A typical Mustache template:</P><PRE><CODE>Hello {{name}}
You have just won ${{value}}!
{{#in_ca}}
Well, ${{taxed_value}}, after taxes.
{{/in_ca}}
</CODE></PRE>
<P>Given the following hash:</P><PRE><CODE>{
  "name": "Chris",
  "value": 10000,
  "taxed_value": 10000 - (10000 * 0.4),
  "in_ca": true
}
</CODE></PRE>
<P>Will produce the following:</P><PRE><CODE>Hello Chris
You have just won $10000!
Well, $6000.0, after taxes.
</CODE></PRE>
<H2>DESCRIPTION</H2>
<P>Mustache can be used for HTML, config files, source code - anything. It works 
by expanding tags in a template using values provided in a hash or object.</P>
<P>We call it "logic-less" because there are no if statements, else clauses, or 
for loops. Instead there are only tags. Some tags are replaced with a value, 
some nothing, and others a series of values. This document explains the 
different types of Mustache tags.</P>
<H2>TAG TYPES</H2>
<P>Tags are indicated by the double mustaches. <CODE>{{person}}</CODE> is a tag, 
as is <CODE>{{#person}}</CODE>. In both examples, we'd refer to 
<CODE>person</CODE> as the key or tag key. Let's talk about the different types 
of tags.</P>
<H3>Variables</H3>
<P>The most basic tag type is the variable. A <CODE>{{name}}</CODE> tag in a 
basic template will try to find the <CODE>name</CODE> key in the current 
context. If there is no <CODE>name</CODE> key, nothing will be rendered.</P>
<P>All variables are HTML escaped by default. If you want to return unescaped 
HTML, use the triple mustache: <CODE>{{{name}}}</CODE>.</P>
<P>You can also use <CODE>&amp;</CODE> to unescape a variable: <CODE>{{&amp; 
name}}</CODE>. This may be useful when changing delimiters (see "Set Delimiter" 
below).</P>
<P>By default a variable "miss" returns an empty string. This can usually be 
configured in your Mustache library. The Ruby version of Mustache supports 
raising an exception in this situation, for instance.</P>
<P>Template:</P><PRE><CODE>* {{name}}
* {{age}}
* {{company}}
* {{{company}}}
</CODE></PRE>
<P>Hash:</P><PRE><CODE>{
  "name": "Chris",
  "company": "&lt;b&gt;GitHub&lt;/b&gt;"
}
</CODE></PRE>
<P>Output:</P><PRE><CODE>* Chris
*
* &amp;lt;b&amp;gt;GitHub&amp;lt;/b&amp;gt;
* &lt;b&gt;GitHub&lt;/b&gt;
</CODE></PRE>
<H3>Sections</H3>
<P>Sections render blocks of text one or more times, depending on the value of 
the key in the current context.</P>
<P>A section begins with a pound and ends with a slash. That is, 
<CODE>{{#person}}</CODE> begins a "person" section while 
<CODE>{{/person}}</CODE> ends it.</P>
<P>The behavior of the section is determined by the value of the key.</P>
<P><STRONG>False Values or Empty Lists</STRONG></P>
<P>If the <CODE>person</CODE> key exists and has a value of false or an empty 
list, the HTML between the pound and slash will not be displayed.</P>
<P>Template:</P><PRE><CODE>Shown.
{{#nothin}}
  Never shown!
{{/nothin}}
</CODE></PRE>
<P>Hash:</P><PRE><CODE>{
  "person": true,
}
</CODE></PRE>
<P>Output:</P><PRE><CODE>Shown.
</CODE></PRE>
<P><STRONG>Non-Empty Lists</STRONG></P>
<P>If the <CODE>person</CODE> key exists and has a non-false value, the HTML 
between the pound and slash will be rendered and displayed one or more 
times.</P>
<P>When the value is a non-empty list, the text in the block will be displayed 
once for each item in the list. The context of the block will be set to the 
current item for each iteration. In this way we can loop over collections.</P>
<P>Template:</P><PRE><CODE>{{#repo}}
  &lt;b&gt;{{name}}&lt;/b&gt;
{{/repo}}
</CODE></PRE>
<P>Hash:</P><PRE><CODE>{
  "repo": [
    { "name": "resque" },
    { "name": "hub" },
    { "name": "rip" },
  ]
}
</CODE></PRE>
<P>Output:</P><PRE><CODE>&lt;b&gt;resque&lt;/b&gt;
&lt;b&gt;hub&lt;/b&gt;
&lt;b&gt;rip&lt;/b&gt;
</CODE></PRE>
<P><STRONG>Lambdas</STRONG></P>
<P>When the value is a callable object, such as a function or lambda, the object 
will be invoked and passed the block of text. The text passed is the literal 
block, unrendered. <CODE>{{tags}}</CODE> will not have been expanded - the 
lambda should do that on its own. In this way you can implement filters or 
caching.</P>
<P>Template:</P><PRE><CODE>{{#wrapped}}
  {{name}} is awesome.
{{/wrapped}}
</CODE></PRE>
<P>Hash:</P><PRE><CODE>{
  "name": "Willy",
  "wrapped": function() {
    return function(text) {
      return "&lt;b&gt;" + render(text) + "&lt;/b&gt;"
    }
  }
}
</CODE></PRE>
<P>Output:</P><PRE><CODE>&lt;b&gt;Willy is awesome.&lt;/b&gt;
</CODE></PRE>
<P><STRONG>Non-False Values</STRONG></P>
<P>When the value is non-false but not a list, it will be used as the context 
for a single rendering of the block.</P>
<P>Template:</P><PRE><CODE>{{#person?}}
  Hi {{name}}!
{{/person?}}
</CODE></PRE>
<P>Hash:</P><PRE><CODE>{
  "person?": { "name": "Jon" }
}
</CODE></PRE>
<P>Output:</P><PRE><CODE>Hi Jon!
</CODE></PRE>
<H3>Inverted Sections</H3>
<P>An inverted section begins with a caret (hat) and ends with a slash. That is 
<CODE>{{^person}}</CODE> begins a "person" inverted section while 
<CODE>{{/person}}</CODE> ends it.</P>
<P>While sections can be used to render text one or more times based on the 
value of the key, inverted sections may render text once based on the inverse 
value of the key. That is, they will be rendered if the key doesn't exist, is 
false, or is an empty list.</P>
<P>Template:</P><PRE><CODE>{{#repo}}
  &lt;b&gt;{{name}}&lt;/b&gt;
{{/repo}}
{{^repo}}
  No repos :(
{{/repo}}
</CODE></PRE>
<P>Hash:</P><PRE><CODE>{
  "repo": []
}
</CODE></PRE>
<P>Output:</P><PRE><CODE>No repos :(
</CODE></PRE>
<H3>Comments</H3>
<P>Comments begin with a bang and are ignored. The following template:</P><PRE><CODE>&lt;h1&gt;Today{{! ignore me }}.&lt;/h1&gt;
</CODE></PRE>
<P>Will render as follows:</P><PRE><CODE>&lt;h1&gt;Today.&lt;/h1&gt;
</CODE></PRE>
<P>Comments may contain newlines.</P>
<H3>Partials</H3>
<P>Partials begin with a greater than sign, like <CODE>{{&gt; box}}</CODE>.</P>
<P>Partials are rendered at runtime (as opposed to compile time), so recursive 
partials are possible. Just avoid infinite loops.</P>
<P>They also inherit the calling context. Whereas in ERB you may have this:</P><PRE><CODE>&lt;%= partial :next_more, :start =&gt; start, :size =&gt; size %&gt;
</CODE></PRE>
<P>Mustache requires only this:</P><PRE><CODE>{{&gt; next_more}}
</CODE></PRE>
<P>Why? Because the <CODE>next_more.mustache</CODE> file will inherit the 
<CODE>size</CODE> and <CODE>start</CODE> methods from the calling context.</P>
<P>In this way you may want to think of partials as includes, or template 
expansion, even though it's not literally true.</P>
<P>For example, this template and partial:</P><PRE><CODE>base.mustache:
&lt;h2&gt;Names&lt;/h2&gt;
{{#names}}
  {{&gt; user}}
{{/names}}

user.mustache:
&lt;strong&gt;{{name}}&lt;/strong&gt;
</CODE></PRE>
<P>Can be thought of as a single, expanded template:</P><PRE><CODE>&lt;h2&gt;Names&lt;/h2&gt;
{{#names}}
  &lt;strong&gt;{{name}}&lt;/strong&gt;
{{/names}}
</CODE></PRE>
<H3>Set Delimiter</H3>
<P>Set Delimiter tags start with an equal sign and change the tag delimiters 
from <CODE>{{</CODE> and <CODE>}}</CODE> to custom strings.</P>
<P>Consider the following contrived example:</P><PRE><CODE>* {{default_tags}}
{{=&lt;% %&gt;=}}
* &lt;% erb_style_tags %&gt;
&lt;%={{ }}=%&gt;
* {{ default_tags_again }}
</CODE></PRE>
<P>Here we have a list with three items. The first item uses the default tag 
style, the second uses erb style as defined by the Set Delimiter tag, and the 
third returns to the default style after yet another Set Delimiter 
declaration.</P>
<P>According to <A 
href="http://google-ctemplate.googlecode.com/svn/trunk/doc/howto.html">ctemplates</A>, 
this "is useful for languages like TeX, where double-braces may occur in the 
text and are awkward to use for markup."</P>
<P>Custom delimiters may not contain whitespace or the equals sign.</P>
<H2>COPYRIGHT</H2>
<P>Mustache is Copyright (C) 2009 Chris Wanstrath</P>
<P>Original CTemplate by Google</P>
<H2>SEE ALSO</H2>
<P>mustache(1), mustache(7), <A 
href="http://mustache.github.com/">http://mustache.github.com/</A></P>
<OL class="foot man">
  <LI class=tl>DEFUNKT </LI>
  <LI class=tc>April 2010 </LI>
  <LI class=tr>mustache(5) </LI></OL></DIV></BODY></HTML>
